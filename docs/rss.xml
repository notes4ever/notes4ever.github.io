<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>notes4ever</title><link>https://notes4ever.github.io</link><description>Anyone who keeps learning stays young.</description><copyright>notes4ever</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/186999790</url><title>avatar</title><link>https://notes4ever.github.io</link></image><lastBuildDate>Mon, 23 Dec 2024 06:47:03 +0000</lastBuildDate><managingEditor>notes4ever</managingEditor><ttl>60</ttl><webMaster>notes4ever</webMaster><item><title>Vim实用技巧-Vim学习笔记</title><link>https://notes4ever.github.io/post/143.html</link><description># 学习资料&#13;
《Vim实用技巧》第二版中文版  关于vim的好书，值得反复学习。</description><guid isPermaLink="true">https://notes4ever.github.io/post/143.html</guid><pubDate>Mon, 23 Dec 2024 06:46:40 +0000</pubDate></item><item><title>vimrc配置-无第三方插件</title><link>https://notes4ever.github.io/post/142.html</link><description>```&#13;
''''''必需的设置 vim最小化配置&#13;
set nocompatible ' 不兼容vi&#13;
filetype plugin indent on ' 激活Vim内置文件类型插件 一般还会加indent启用根据文件类型缩进&#13;
syntax on ' 语法高亮&#13;
&#13;
''''''复制粘贴 剪切板 解释与配置&#13;
'vim --version | grep clipboard&#13;
'+clipboard  代表支持与系统剪切板交互，-代表不支持。</description><guid isPermaLink="true">https://notes4ever.github.io/post/142.html</guid><pubDate>Mon, 23 Dec 2024 06:06:15 +0000</pubDate></item><item><title>nginx连接数统计</title><link>https://notes4ever.github.io/post/141.html</link><description>在默认主机里面加上location或者你希望能访问到的主机里面加上如下配置：&#13;
```&#13;
location /status &#13;
{&#13;
        stub_status on;&#13;
        access_log off;            &#13;
}&#13;
```&#13;
&#13;
重启nginx，在浏览器中输入nginx的地址：`http://127.0.0.1/status`，即可查看nginx的状态信息:&#13;
&#13;
![image](https://github.com/user-attachments/assets/fc1219ba-c5f5-4739-b3a3-5fc8b297cf60)&#13;
&#13;
**Active connections – 活跃的连接数量**&#13;
server accepts handled requests — 总共处理了7个连接 , 成功创建7次握手, 总共处理了36个请求。</description><guid isPermaLink="true">https://notes4ever.github.io/post/141.html</guid><pubDate>Mon, 23 Dec 2024 02:20:08 +0000</pubDate></item><item><title>Linux新增用户一般流程</title><link>https://notes4ever.github.io/post/140.html</link><description>&gt; **内容基于Kimi修改**&#13;
&#13;
## 基于linuxmint实操记录&#13;
&#13;
使用root创建一个能登录bash的用户test：&#13;
```&#13;
useradd -m -s /bin/bash test&#13;
```&#13;
&#13;
修改密码：&#13;
```&#13;
passwd test&#13;
```&#13;
&#13;
复制一个用户的home目录过去test用户的home目录：&#13;
```&#13;
cp -R /home/w/.  /home/test/&#13;
chown -R test:test /home/test&#13;
```&#13;
&#13;
注意`.`和`*`的区别，前者包括隐藏的文件和目录，后者只包括非隐藏的，这里的复制主要是要复制一些配置文件，所以只能使用前者。</description><guid isPermaLink="true">https://notes4ever.github.io/post/140.html</guid><pubDate>Mon, 23 Dec 2024 00:15:30 +0000</pubDate></item><item><title>nginx事件处理</title><link>https://notes4ever.github.io/post/139.html</link><description>Nginx的连接处理机制在不同的操作系统中会采用不同的I/O模型，在Linux下，Nginx使用**epoll**的I/O多路复用模型，在Freebsd中使用**kqueue**的I/O多路复用模型，在Solaris中使用/dev/poll方式的I/O多路复用模型，在Windows中使用的是**icop**，等等。</description><guid isPermaLink="true">https://notes4ever.github.io/post/139.html</guid><pubDate>Thu, 19 Dec 2024 07:01:34 +0000</pubDate></item><item><title>nginx worker进程</title><link>https://notes4ever.github.io/post/138.html</link><description>类比：Nginx服务就相当于饭店，网站用户就相当于顾客，Nginx的进程就相当于服务员，饭店要根据客户的流量及并发量来调整接待的服务人员数量，然后根据顾客量变化的监测结果及时调整到最佳的配置。</description><guid isPermaLink="true">https://notes4ever.github.io/post/138.html</guid><pubDate>Thu, 19 Dec 2024 06:58:55 +0000</pubDate></item><item><title>nginx 499状态码</title><link>https://notes4ever.github.io/post/137.html</link><description>首先，我们要知道，Nginx 499 是 Nginx 自身定义的状态码，并非任何 RFC 中定义的 HTTP 状态码。</description><guid isPermaLink="true">https://notes4ever.github.io/post/137.html</guid><pubDate>Thu, 19 Dec 2024 06:50:40 +0000</pubDate></item><item><title>nginx压缩相关</title><link>https://notes4ever.github.io/post/136.html</link><description>## 动态压缩&#13;
服务器给客户端返回响应时，消耗自身的资源进行实时压缩，保证客户端拿到 gzip 格式的文件，这个模块是默认编译的。</description><guid isPermaLink="true">https://notes4ever.github.io/post/136.html</guid><pubDate>Thu, 19 Dec 2024 01:41:33 +0000</pubDate></item><item><title>nginx安装相关</title><link>https://notes4ever.github.io/post/135.html</link><description>## linuxmint上使用apt安装&#13;
```&#13;
sudo apt update&#13;
sudo apt install nginx -y&#13;
```&#13;
&#13;
安装完，默认nginx创建了www-data用户与用户组。</description><guid isPermaLink="true">https://notes4ever.github.io/post/135.html</guid><pubDate>Thu, 19 Dec 2024 01:36:36 +0000</pubDate></item><item><title>curl分析请求耗时</title><link>https://notes4ever.github.io/post/134.html</link><description>## 与耗时相关的参数&#13;
以下是一些常见的 curl --write-out 即：curl -w 参数及其解释：&#13;
```&#13;
%{http_code}：输出HTTP状态码。</description><guid isPermaLink="true">https://notes4ever.github.io/post/134.html</guid><pubDate>Thu, 19 Dec 2024 01:03:23 +0000</pubDate></item><item><title>curl常用参数与示例</title><link>https://notes4ever.github.io/post/133.html</link><description>## -I 参数&#13;
使用：curl -I url&#13;
http响应的头部信息（header）不需要知道返回内容body的时候使用大写-I参数&#13;
&#13;
## -i 参数&#13;
使用：curl -i  url&#13;
显示响应头、返回内容body&#13;
&#13;
## -v 参数&#13;
-v：显示最详细的信息&#13;
包含请求头、响应头、返回内容&#13;
&#13;
## -o 参数&#13;
curl -o：保存为文件&#13;
&#13;
## -L 参数&#13;
curl -L&#13;
重定向301，追踪重定向&#13;
&#13;
## -D 参数&#13;
curl  url  -D   存放的文件名&#13;
将响应头存输出到文件中。</description><guid isPermaLink="true">https://notes4ever.github.io/post/133.html</guid><pubDate>Thu, 19 Dec 2024 00:28:39 +0000</pubDate></item><item><title>Chrome安装包离线下载</title><link>https://notes4ever.github.io/post/132.html</link><description>[Chrome 浏览器各版本下载大全](https://liulanmi.com/chrome)&#13;
&#13;
官网下载，windows版本示例：&#13;
&#13;
https://www.google.cn/chrome/?standalone=1&amp;platform=win64&amp;extra=stablechannel。</description><guid isPermaLink="true">https://notes4ever.github.io/post/132.html</guid><pubDate>Mon, 09 Dec 2024 02:54:25 +0000</pubDate></item><item><title>PowerShell</title><link>https://notes4ever.github.io/post/131.html</link><description>## 查看PowerShell版本&#13;
在PowerShell中执行：&#13;
```&#13;
$PSVersionTable.PSVersion&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/03737299-c1dc-4f7f-b4aa-4135ebbe2cbb)&#13;
&#13;
## 搜索最新版本&#13;
&#13;
```&#13;
winget search Microsoft.PowerShell&#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/abfc93ac-394f-4ad6-a505-ef09bf08e544)&#13;
&#13;
## 安装新版本&#13;
使用 Winget 安装 PowerShell:&#13;
```&#13;
winget install --id Microsoft.Powershell --source winget&#13;
```&#13;
&#13;
使用 Winget 安装 PowerShell 预览版&#13;
```&#13;
winget install --id Microsoft.Powershell.Preview --source winget&#13;
```&#13;
&#13;
## 禁止启动时检查版本&#13;
启动的命令添加 –nologo。</description><guid isPermaLink="true">https://notes4ever.github.io/post/131.html</guid><pubDate>Mon, 09 Dec 2024 02:51:07 +0000</pubDate></item><item><title>cmd提示找不到路径</title><link>https://notes4ever.github.io/post/130.html</link><description>windows上打开cmd窗口时提示找不到路径，可能是注册表里面的autorun导致。</description><guid isPermaLink="true">https://notes4ever.github.io/post/130.html</guid><pubDate>Mon, 09 Dec 2024 02:44:01 +0000</pubDate></item><item><title>finalshell配置</title><link>https://notes4ever.github.io/post/129.html</link><description>可以方便调节中英文字体的SSH客户端，亲测效果很好。</description><guid isPermaLink="true">https://notes4ever.github.io/post/129.html</guid><pubDate>Tue, 03 Dec 2024 01:16:16 +0000</pubDate></item><item><title>《异类》</title><link>https://notes4ever.github.io/post/128.html</link><description>《异类》一书探讨了顶尖人物成功背后的真实原因，指出个人努力和天赋虽然重要，但并非决定性的因素。</description><guid isPermaLink="true">https://notes4ever.github.io/post/128.html</guid><pubDate>Sun, 01 Dec 2024 04:14:53 +0000</pubDate></item><item><title>学习方法论</title><link>https://notes4ever.github.io/post/127.html</link><description>&gt; **读书，学习方法论**&#13;
&#13;
## 道长的思维铺子&#13;
[作者的B站主页](https://space.bilibili.com/446630510)&#13;
&#13;
[作者的Youtube视频主页](https://www.youtube.com/@%E7%A8%8B%E9%A9%BF-i5j/videos)&#13;
&#13;
**部分视频清单**:&#13;
&#13;
- [到底什么是学习？为什么我非得要学习？| 这是学习的底层逻辑！](https://www.bilibili.com/video/BV1GYsrefE9n)&#13;
- [如何把历史这门很多人认为的“枯燥”学科，变得万分“有趣”呢](https://www.bilibili.com/video/BV1HM4m127uS)&#13;
- [如何用「底层逻辑」搭建你自己独一无二的「知识体系」呢](https://www.bilibili.com/video/BV13f421q72g)&#13;
- [终身学习者必看，太牛了 | 读书原来也分等级](https://www.bilibili.com/video/BV1Uppte3EGm)&#13;
- [你的思考缺乏深度，很难举一反三？ | 如何让思考具备逻辑？](https://www.bilibili.com/video/BV1F4m2YZER3)&#13;
- [经常都在说三观不和！三观是怎样形成的？ | 如何搞懂你和身边人的三观？](https://www.bilibili.com/video/BV1tTy5Y6ES4)&#13;
- [个人生产力』会经历三个阶段 | 你现在处于哪一阶段](https://www.bilibili.com/video/BV1SZxWerEVL)&#13;
- [马斯克和普通人的思维水平差别到底有多大？](https://www.bilibili.com/video/BV1cT421k7UU)&#13;
- [我真的是'太作”了吗？ | 带你真的了解抑郁症](https://www.bilibili.com/video/BV1mjS7YfEvA)&#13;
- [世界如此颠沛流离，自我又在哪里 | 如何活出自我的真谛](https://www.bilibili.com/video/BV1ketPe5E1a)&#13;
- [什么是学习，学习的正确方式是什么？](https://www.bilibili.com/video/BV1z4411y7Gg)&#13;
- [什么是意义？我们又如何找到人生意义？](https://www.bilibili.com/video/BV1jt41177HW)&#13;
- [你该通过哪些方式确定，对方有多爱你](https://www.bilibili.com/video/BV1jt41177HW)&#13;
&#13;
**部分视频的摘要/笔记**：&#13;
&#13;
什么是'书”？&#13;
&#13;
'书”的形状是什么？&#13;
&#13;
山？金字塔？树？&#13;
&#13;
读书有哪几个段位？&#13;
&#13;
感知、概要、逻辑、结构、原理&#13;
&#13;
如何读懂一本书的逻辑？&#13;
&#13;
书是信息和知识的承载体。</description><guid isPermaLink="true">https://notes4ever.github.io/post/127.html</guid><pubDate>Sat, 30 Nov 2024 05:15:29 +0000</pubDate></item><item><title>SSH非交互式的登录方式</title><link>https://notes4ever.github.io/post/126.html</link><description>SSH终端登录时默认使用的是**非交互式的登录方式**（non-interactive login），这可能导致无法自动执行source ~/.bashrc。</description><guid isPermaLink="true">https://notes4ever.github.io/post/126.html</guid><pubDate>Fri, 29 Nov 2024 08:50:43 +0000</pubDate></item><item><title>ITSM、一线运维与其他运维</title><link>https://notes4ever.github.io/post/125.html</link><description>&gt; **关于ITSM与一线运维以及其他运维的概念厘清；内容参考AI汇总，如Kimi，genspark等。</description><guid isPermaLink="true">https://notes4ever.github.io/post/125.html</guid><pubDate>Fri, 22 Nov 2024 08:02:00 +0000</pubDate></item><item><title>从零设计DevOps运维服务体系</title><link>https://notes4ever.github.io/post/124.html</link><description>&gt; **好文学习**&#13;
&#13;
原文链接：https://zhuanlan.zhihu.com/p/181415402&#13;
&#13;
部分摘录：&#13;
&#13;
运维工作一直围绕高SLA和低成本的业务目标运转着，只是工具在围绕着体系变来变去。</description><guid isPermaLink="true">https://notes4ever.github.io/post/124.html</guid><pubDate>Fri, 22 Nov 2024 07:00:07 +0000</pubDate></item><item><title>如何搭建SRE能力</title><link>https://notes4ever.github.io/post/123.html</link><description>&gt; **好文学习**&#13;
&#13;
原文链接：https://www.infoq.cn/article/vSjY7L6ykpLBlHD7RuxQ&#13;
&#13;
部分摘录：&#13;
&#13;
## 业务需要哪些技术支撑能力&#13;
运维本质是一类技术支撑能力，跟基础架构团队很像，有些活放到运维团队是可以的，放到基础架构团队问题也不大，甚至有些公司直接把这类人放到业务研发团队，我们暂且不管分工的问题，先来梳理一下业务需要什么样的技术支撑能力。</description><guid isPermaLink="true">https://notes4ever.github.io/post/123.html</guid><pubDate>Fri, 22 Nov 2024 06:54:43 +0000</pubDate></item><item><title>基于 DevOps 打造高效运维团队</title><link>https://notes4ever.github.io/post/122.html</link><description>&gt; **好文学习**&#13;
&#13;
原文链接：http://www.uml.org.cn/devops/201812113.asp&#13;
&#13;
部分摘录：&#13;
&#13;
工程师文化是比较虚的东西，这里我们提出一个新的东西叫“故障文化”。</description><guid isPermaLink="true">https://notes4ever.github.io/post/122.html</guid><pubDate>Fri, 22 Nov 2024 06:45:40 +0000</pubDate></item><item><title>SRE与Devops</title><link>https://notes4ever.github.io/post/121.html</link><description>谷歌的一名SRE出了一本书叫《[SRE：Google运维解密](https://book.douban.com/subject/26875239/)》，通过这本书，我们知道了谷歌SRE的一些方法论： &#13;
&#13;
- 运维工作50%，另外50%精力用于开发自动化工具； &#13;
- 保障服务的前提下最大化迭代速度，不追求100%可靠性； &#13;
- 通过监控预案缩短平均恢复时间MTTR； &#13;
- 部署变更管理：渐进发布，精确检测，安全回滚； &#13;
&#13;
总体来说，**SRE就是运维开发一体化的一套方法论**，而在**国内这种运维开发一体化的模式叫做Devops**。</description><guid isPermaLink="true">https://notes4ever.github.io/post/121.html</guid><pubDate>Fri, 22 Nov 2024 06:39:12 +0000</pubDate></item><item><title>DDoS</title><link>https://notes4ever.github.io/post/120.html</link><description>&gt; **关于DDoS相关知识的学习与摘抄笔记**&#13;
&#13;
## DDoS简介&#13;
DDoS 的前身是 DoS（Denail of Service），即拒绝服务攻击，指利用大量的合理请求，来占用过多的目标资源，从而使目标服务无法响应正常请求。</description><guid isPermaLink="true">https://notes4ever.github.io/post/120.html</guid><pubDate>Fri, 22 Nov 2024 06:29:15 +0000</pubDate></item><item><title>从Equifax信息泄露看数据安全</title><link>https://notes4ever.github.io/post/119.html</link><description>&gt; **摘抄自：左耳听风-极客时间-陈皓**&#13;
&#13;
## 数据泄露介绍以及历史回顾&#13;
类似于 Equifax 这样的大规模数据泄露事件在互联网时代时不时地会发生。</description><guid isPermaLink="true">https://notes4ever.github.io/post/119.html</guid><pubDate>Fri, 22 Nov 2024 05:51:51 +0000</pubDate></item><item><title>数字证书与公钥私钥</title><link>https://notes4ever.github.io/post/118.html</link><description>&gt; **关于TLS/SSL证书与公钥私钥的理解，内容参考了AI回答，如Kimi等。</description><guid isPermaLink="true">https://notes4ever.github.io/post/118.html</guid><pubDate>Fri, 22 Nov 2024 05:18:06 +0000</pubDate></item><item><title>NAT</title><link>https://notes4ever.github.io/post/117.html</link><description>&gt; **关于网络nat知识的笔记和摘要**&#13;
&#13;
## NAT 原理&#13;
NAT 技术可以重写 IP 数据包的源 IP 或者目的 IP，被普遍地用来解决公网 IP 地址短缺的问题。</description><guid isPermaLink="true">https://notes4ever.github.io/post/117.html</guid><pubDate>Fri, 22 Nov 2024 02:56:06 +0000</pubDate></item><item><title>网络工具之ethtool</title><link>https://notes4ever.github.io/post/116.html</link><description>![image](https://github.com/user-attachments/assets/c247c4aa-16cf-47b7-b93e-23763b473416)&#13;
&#13;
&gt; **数据链路层和物理层工具：ethtool**&#13;
&#13;
linux自带的工具和命令：&#13;
&#13;
```&#13;
ethtool -S enp0s5&#13;
```&#13;
&#13;
如果这一层有问题，就会直接体现在**网络层**表现上面，比如 IP 会有丢包和延迟等现象，然后会引发**传输层**异常 （如丢包、乱序、重传等）。</description><guid isPermaLink="true">https://notes4ever.github.io/post/116.html</guid><pubDate>Fri, 22 Nov 2024 02:43:55 +0000</pubDate></item><item><title>常用网络工具之nmap</title><link>https://notes4ever.github.io/post/115.html</link><description>## nmap常用命令示例&#13;
&#13;
```&#13;
nmap -Pn 192.168.12.104&#13;
```&#13;
&#13;
**-Pn**参数：穿透防火墙进行扫描，**扫描之前不需要用ping命令**（有些防火墙禁止ping命令）。</description><guid isPermaLink="true">https://notes4ever.github.io/post/115.html</guid><pubDate>Fri, 22 Nov 2024 02:36:22 +0000</pubDate></item><item><title>内核是怎么接收网络包的</title><link>https://notes4ever.github.io/post/114.html</link><description>&gt; **《深入理解Linux网络 张彦飞》学习笔记。</description><guid isPermaLink="true">https://notes4ever.github.io/post/114.html</guid><pubDate>Fri, 22 Nov 2024 02:15:42 +0000</pubDate></item><item><title>TCP与内核参数</title><link>https://notes4ever.github.io/post/113.html</link><description>&gt; **TCP连接的建立断开受哪些系统配置影响？阐释一些影响网络协议栈的linux内核参数的配置和使用。</description><guid isPermaLink="true">https://notes4ever.github.io/post/113.html</guid><pubDate>Fri, 22 Nov 2024 01:18:22 +0000</pubDate></item><item><title>TCP、UDP、Socket</title><link>https://notes4ever.github.io/post/112.html</link><description>&gt; **核心网络知识，学习笔记汇总和摘抄**&#13;
&#13;
## 三次握手示意图&#13;
![image](https://github.com/user-attachments/assets/446190eb-3b34-474e-8b42-e91ee2ae56b2)&#13;
&#13;
## 四次挥手示意图&#13;
![image](https://github.com/user-attachments/assets/97335f72-044f-4c34-af70-ba882f12791f)&#13;
&#13;
## 三次握手+四次挥手&#13;
![image](https://github.com/user-attachments/assets/445f9f37-268e-4865-8790-2c656756335c)&#13;
&#13;
## 关于三次挥手&#13;
实际挥手过程可能只有三个包，而不是四个。</description><guid isPermaLink="true">https://notes4ever.github.io/post/112.html</guid><pubDate>Thu, 21 Nov 2024 01:00:56 +0000</pubDate></item><item><title>网络连接相关ss与netstat</title><link>https://notes4ever.github.io/post/111.html</link><description>## ss和netstat的区别&#13;
了解当前系统开放了哪些端口，并且要查看开放这些端口的具体进程和用户。</description><guid isPermaLink="true">https://notes4ever.github.io/post/111.html</guid><pubDate>Wed, 20 Nov 2024 08:53:27 +0000</pubDate></item><item><title>网络可达与网络路由探测</title><link>https://notes4ever.github.io/post/110.html</link><description>&gt; **大杂烩，关于网络可达性与路由相关的命令与工具，使用笔记总结。</description><guid isPermaLink="true">https://notes4ever.github.io/post/110.html</guid><pubDate>Wed, 20 Nov 2024 06:21:30 +0000</pubDate></item><item><title>网络分层与对应协议和工具</title><link>https://notes4ever.github.io/post/109.html</link><description>&gt; **极客时间学习课程笔记摘要**&#13;
&#13;
## OSI七层互联参考模型&#13;
![image](https://github.com/user-attachments/assets/8f434493-0601-4ad4-bc15-ab0f7297ee7a)&#13;
&#13;
## 网络分层与对应的数据包术语&#13;
![image](https://github.com/user-attachments/assets/be700def-31d8-43b0-87e6-e8fae33dc6fd)&#13;
&#13;
![image](https://github.com/user-attachments/assets/b76e2ecf-9a09-4b10-8ab0-2f4731ddb494)&#13;
&#13;
实际上正在使用的TCP/IP是四层或者五层，都有人说，但平时讨论的时候，约定俗成使用七层讨论。</description><guid isPermaLink="true">https://notes4ever.github.io/post/109.html</guid><pubDate>Wed, 20 Nov 2024 05:23:12 +0000</pubDate></item><item><title>服务器时间同步chronyc</title><link>https://notes4ever.github.io/post/108.html</link><description>chronyc 命令：设置时间与时间服务器同步。</description><guid isPermaLink="true">https://notes4ever.github.io/post/108.html</guid><pubDate>Wed, 20 Nov 2024 02:59:22 +0000</pubDate></item><item><title>shell变量与export</title><link>https://notes4ever.github.io/post/107.html</link><description>## 全局变量&#13;
全局环境变量对于 shell 会话和所有生成的子 shell 都是可见的。</description><guid isPermaLink="true">https://notes4ever.github.io/post/107.html</guid><pubDate>Wed, 20 Nov 2024 02:45:44 +0000</pubDate></item><item><title>crontab基本使用</title><link>https://notes4ever.github.io/post/106.html</link><description>查看当前:&#13;
```&#13;
crontab -l&#13;
```&#13;
修改:&#13;
```&#13;
crontab -e&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/106.html</guid><pubDate>Wed, 20 Nov 2024 02:19:25 +0000</pubDate></item><item><title>cat命令清空文件</title><link>https://notes4ever.github.io/post/105.html</link><description>big_filename是大文件:&#13;
```&#13;
cat /dev/null &gt; /xxx/big_filename&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/105.html</guid><pubDate>Wed, 20 Nov 2024 02:17:55 +0000</pubDate></item><item><title>shell内建命令与外部命令</title><link>https://notes4ever.github.io/post/104.html</link><description>![image](https://github.com/user-attachments/assets/5a662f9f-2ce2-437a-9108-4c8a13381269)&#13;
&#13;
![image](https://github.com/user-attachments/assets/6becc6c3-baf5-4f07-b532-0131441a90d2)&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/104.html</guid><pubDate>Wed, 20 Nov 2024 02:16:37 +0000</pubDate></item><item><title>blkid挂载光驱cdrom</title><link>https://notes4ever.github.io/post/103.html</link><description>```&#13;
sudo mkdir /mnt/cdrom&#13;
sudo mount /dev/sr0 /mnt/cdrom&#13;
```&#13;
&#13;
其他操作参考：&#13;
&#13;
[Linux下挂载光驱的方法](https://cn.linux-console.net/?p=10438)。</description><guid isPermaLink="true">https://notes4ever.github.io/post/103.html</guid><pubDate>Wed, 20 Nov 2024 02:13:24 +0000</pubDate></item><item><title>查看命令工具tldr</title><link>https://notes4ever.github.io/post/102.html</link><description>&#13;
## 项目主页与安装&#13;
开源主页：https://github.com/tldr-pages/tldr&#13;
&#13;
安装方式：&#13;
```&#13;
pip3 install tldr&#13;
source .profile&#13;
tldr -u&#13;
```&#13;
使用：&#13;
```&#13;
tldr + 命令 &#13;
```&#13;
&#13;
![image](https://github.com/user-attachments/assets/230ef904-3544-4f4c-8267-c48d1bbf1735)&#13;
&#13;
## 使用注意&#13;
### 提示ssl错误&#13;
```&#13;
git config --global http.sslverify false&#13;
git config --global https.sslverify false&#13;
```&#13;
并确保网络是通畅的。</description><guid isPermaLink="true">https://notes4ever.github.io/post/102.html</guid><pubDate>Wed, 20 Nov 2024 02:11:25 +0000</pubDate></item><item><title>常用命令之pidof</title><link>https://notes4ever.github.io/post/101.html</link><description>与 `ps -ef | grep 进程名` 类似，`pidof 进程名` 可以查看进程名对应的进程id。</description><guid isPermaLink="true">https://notes4ever.github.io/post/101.html</guid><pubDate>Wed, 20 Nov 2024 02:00:57 +0000</pubDate></item><item><title>常用命令之sort</title><link>https://notes4ever.github.io/post/100.html</link><description>## sort -n&#13;
![image](https://github.com/user-attachments/assets/902f1227-cd3b-48bc-a848-a369e809fe15)&#13;
&#13;
## sort -M&#13;
![image](https://github.com/user-attachments/assets/9d5d51e8-faf4-4f6d-a256-957101a0243a)&#13;
&#13;
## 其他参数&#13;
![image](https://github.com/user-attachments/assets/6da01569-2ff5-40c6-95df-3d32f9282ba6)&#13;
&#13;
![image](https://github.com/user-attachments/assets/7511fa86-b9e3-418e-9711-f15de3895cc3)&#13;
&#13;
![image](https://github.com/user-attachments/assets/45db71c3-119a-40e8-acab-a51a50cf118e)&#13;
&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/100.html</guid><pubDate>Wed, 20 Nov 2024 01:54:41 +0000</pubDate></item><item><title>查看系统信息neofetch</title><link>https://notes4ever.github.io/post/99.html</link><description>![image](https://github.com/user-attachments/assets/ab8a69ab-ddb8-46a5-81ab-bcb58e42b505)&#13;
&#13;
Neofetch 是一个简单但有用的命令行系统信息工具，它用 Bash 编写。</description><guid isPermaLink="true">https://notes4ever.github.io/post/99.html</guid><pubDate>Wed, 20 Nov 2024 01:43:56 +0000</pubDate></item><item><title>文件互传lrzsz</title><link>https://notes4ever.github.io/post/98.html</link><description>rz，sz是Linux/Unix同Windows进行ZModem文件传输的命令行工具。</description><guid isPermaLink="true">https://notes4ever.github.io/post/98.html</guid><pubDate>Wed, 20 Nov 2024 01:39:42 +0000</pubDate></item><item><title>服务降级的理解</title><link>https://notes4ever.github.io/post/97.html</link><description>在IT领域，特别是在软件开发和系统架构中，**降级**通常指的是在系统遇到问题或故障时，为了保持系统的可用性和稳定性，采取的一种降低服务级别的措施。</description><guid isPermaLink="true">https://notes4ever.github.io/post/97.html</guid><pubDate>Wed, 20 Nov 2024 01:36:01 +0000</pubDate></item><item><title>手机去广告之GKD</title><link>https://notes4ever.github.io/post/96.html</link><description>## 项目与安装&#13;
github项目主页：https://github.com/gkd-kit/gkd&#13;
&#13;
官网：https://gkd.li/&#13;
&#13;
下载安装：https://github.com/gkd-kit/gkd/releases&#13;
&#13;
目前star已经超过22k。</description><guid isPermaLink="true">https://notes4ever.github.io/post/96.html</guid><pubDate>Wed, 20 Nov 2024 00:45:57 +0000</pubDate></item><item><title>应用监控之指标与日志监控</title><link>https://notes4ever.github.io/post/95.html</link><description>&gt; **极客时间学习课程摘要笔记**&#13;
&#13;
## 指标监控&#13;
跟系统监控一样，在构建应用程序的监控系统之前，首先也需要确定，到底需要监控哪些指标。</description><guid isPermaLink="true">https://notes4ever.github.io/post/95.html</guid><pubDate>Tue, 19 Nov 2024 09:59:49 +0000</pubDate></item><item><title>系统监控USE方法</title><link>https://notes4ever.github.io/post/94.html</link><description>&gt; **极客时间课程学习摘要笔记**&#13;
&#13;
在前面的内容中，我为你介绍了很多性能分析的原理、思路以及相关的工具。</description><guid isPermaLink="true">https://notes4ever.github.io/post/94.html</guid><pubDate>Tue, 19 Nov 2024 09:48:12 +0000</pubDate></item><item><title>故障处理大纲</title><link>https://notes4ever.github.io/post/93.html</link><description>&gt; **左耳听风-极客时间-陈皓，笔记摘要**&#13;
&#13;
## 故障应对&#13;
或多或少我们都会经历线上的故障。</description><guid isPermaLink="true">https://notes4ever.github.io/post/93.html</guid><pubDate>Tue, 19 Nov 2024 08:43:27 +0000</pubDate></item><item><title>全栈监控大纲</title><link>https://notes4ever.github.io/post/92.html</link><description>&gt; **左耳听风-极客时间-陈皓，笔记摘要**&#13;
&#13;
在分布式或 Cloud Native 的情况下，系统分成多层，服务各种关联，需要监控的东西特别多。</description><guid isPermaLink="true">https://notes4ever.github.io/post/92.html</guid><pubDate>Tue, 19 Nov 2024 08:14:10 +0000</pubDate></item><item><title>Linux动态追踪</title><link>https://notes4ever.github.io/post/91.html</link><description>&gt; **极客时间学习课程，笔记摘要。</description><guid isPermaLink="true">https://notes4ever.github.io/post/91.html</guid><pubDate>Tue, 19 Nov 2024 07:44:32 +0000</pubDate></item><item><title>常用压测工具</title><link>https://notes4ever.github.io/post/90.html</link><description>## wrk &#13;
### 项目主页于常用用法示例&#13;
wrk（linux用）项目主页：https://github.com/wg/wrk&#13;
&#13;
运行30秒的基准测试, 使用2个线程、100个http连接:&#13;
```&#13;
wrk -t2 -c100 -d30s http://127.0.0.1:8080/index.html&#13;
```&#13;
&#13;
更常用的，会加上延迟分布于超时设置，比如，&#13;
&#13;
显示延时分布的统计信息   测试1分钟  100个连接   20线程  设置超时5秒 &#13;
```&#13;
wrk --latency  -d 60s   -c 100  -t  20 --timeout 5   http://127.0.0.1:8080/index.html&#13;
```&#13;
&#13;
### wrk安装记录&#13;
如果没有lua就先安装lua：&#13;
&#13;
```&#13;
sudo apt install lua5.3&#13;
sudo apt install luajit&#13;
sudo apt install build-essential&#13;
```&#13;
&#13;
然后下载wrk进行编译安装。</description><guid isPermaLink="true">https://notes4ever.github.io/post/90.html</guid><pubDate>Tue, 19 Nov 2024 07:28:36 +0000</pubDate></item><item><title>chrome开发者面板</title><link>https://notes4ever.github.io/post/89.html</link><description>![image](https://github.com/user-attachments/assets/732d850c-8e92-44dc-b89c-1f865e0488f6)&#13;
&#13;
Chrome 等浏览器自带的开发者工具可以很好地观察客户端延迟指标，面板左边有每个 URI 具体消耗的时间，面板的右边也是类似的瀑布图。</description><guid isPermaLink="true">https://notes4ever.github.io/post/89.html</guid><pubDate>Tue, 19 Nov 2024 06:36:54 +0000</pubDate></item><item><title>cookie安全相关</title><link>https://notes4ever.github.io/post/88.html</link><description>## secure和httponly属性&#13;
&#13;
`Set-Cookie: sessionid=123456789; Secure; HttpOnly`&#13;
&#13;
httpOnly 是 Cookie 中的一个属性，它的主要作用是提高 web 应用程序的安全性。</description><guid isPermaLink="true">https://notes4ever.github.io/post/88.html</guid><pubDate>Tue, 19 Nov 2024 06:04:10 +0000</pubDate></item><item><title>http报文headers分界线</title><link>https://notes4ever.github.io/post/87.html</link><description>HTTP 报文内容，分成了头部（headers）和载荷（Payload 或者 body）两部分；HTTP 规定，**头部和载荷的分界线是两次 CRLF**。</description><guid isPermaLink="true">https://notes4ever.github.io/post/87.html</guid><pubDate>Tue, 19 Nov 2024 05:14:48 +0000</pubDate></item><item><title>linux内核参数调优-带注释</title><link>https://notes4ever.github.io/post/86.html</link><description>#使用cookie 缓解syn flood攻击 必须设置为1&#13;
net.ipv4.tcp_syncookies = 1&#13;
&#13;
#半连接的队列长度 调大容纳更多客户端syn请求 无标准 可以设置大一点 &#13;
net.ipv4.tcp_max_syn_backlog = 262144&#13;
&#13;
#客户端重试syn的次数 让客户端早点放弃重试 设置1-3 如果是内网设置1-2  如果是外网2-3&#13;
net.ipv4.tcp_syn_retries = 1&#13;
&#13;
#收不到client回复 服务端重试次数 早点放弃 设置1-3 如果是内网设置1-2  如果是外网2-3&#13;
net.ipv4.tcp_synack_retries = 1&#13;
&#13;
#全连接队列长度 超过长度会丢弃，可以设置大点&#13;
net.core.somaxconn = 65500&#13;
&#13;
#收不到对端的FIN包 尽早放弃 设置1-3 如果是内网设置1-2  如果是外网2-3&#13;
net.ipv4.tcp_fin_timeout = 1&#13;
&#13;
#限制TIME_WAIT状态数量 不能设置太大 可以几千到几万之间&#13;
net.ipv4.tcp_max_tw_buckets = 6000&#13;
&#13;
#复用处于TIME_WAIT状态的连接 避免本机端口不足 必须设置为1&#13;
#允许作为客户端的新连接，在安全条件下使 用 TIME_WAIT 状态下的端口&#13;
net.ipv4.tcp_tw_reuse = 1&#13;
&#13;
#要想使 tcp_tw_reuse 生效，还得把 timestamps 参数设置为 1，满足安全复用的先决条件（对方也要打开 tcp_timestamps ）&#13;
net.ipv4.tcp_timestamps = 1  &#13;
&#13;
#新版本已废弃 会引起意料不到的问题，比如可能会引起NAT环境下的丢包问题 设置为0&#13;
#Linux 4.12 版本后，直接取消了这一参数 它并不要求 TIME_WAIT 状态存在 60 秒，很容易导致数据错乱，不建议设置为 1&#13;
net.ipv4.tcp_tw_recycle = 0 &#13;
&#13;
#所有协议类型读的最大套接字缓冲大小 单位字节 为了支撑10Gb/s 设置为16MB或更高&#13;
net.core.rmem_max = 16777216&#13;
&#13;
#所有协议类型写的最大套接字缓冲大小&#13;
net.core.wmem_max = 16777216&#13;
&#13;
#启用TCP接收缓冲的自动调整&#13;
net.ipv4.tcp_moderate_rcvbuf = 1 &#13;
&#13;
#为TCP读缓冲设置自动调优参数&#13;
net.ipv4.tcp_rmem = 4096	87380	16777216&#13;
&#13;
#为TCP写缓冲设置自动调优参数&#13;
net.ipv4.tcp_wmem = 4096	65535	16777216  &#13;
&#13;
#接收缓冲区调节时，判断空闲内存的多少 数值大有利于更多地利用内存 具体多少合适，不确定&#13;
net.ipv4.tcp_mem = 94500000 915000000 927000000&#13;
&#13;
#以下两个，有没有用，还不确定&#13;
net.core.wmem_default = 8388608&#13;
net.core.rmem_default = 8388608&#13;
&#13;
#增加每个cpu的网络设备积压队列长度 至少比tcp_max_syn_backlog大&#13;
net.core.netdev_max_backlog = 262144 &#13;
&#13;
#sack和fack能在高延时的网络中提高吞吐性能，以一定的cpu资源为代价&#13;
net.ipv4.tcp_sack = 1&#13;
net.ipv4.tcp_fack = 1  &#13;
&#13;
#打开tfo功能 减少握手的rtt 需要客户端和服务端同时支持，否则回退到传统的三次握手&#13;
net.ipv4.tcp_fastopen = 3&#13;
&#13;
#Linux 系统为防止孤儿连接过多，导致系统资源长期被占用，就提供了 tcp_max_orphans 参数。</description><guid isPermaLink="true">https://notes4ever.github.io/post/86.html</guid><pubDate>Tue, 19 Nov 2024 02:57:25 +0000</pubDate></item><item><title>修改内核参数命令sysctl</title><link>https://notes4ever.github.io/post/85.html</link><description>sysctl 命令来自英文词组 system control 的缩写，其功能是配置系统内核参数。</description><guid isPermaLink="true">https://notes4ever.github.io/post/85.html</guid><pubDate>Tue, 19 Nov 2024 02:53:10 +0000</pubDate></item><item><title>查看cpu相关信息</title><link>https://notes4ever.github.io/post/84.html</link><description>查看cpu物理数量：&#13;
```&#13;
grep 'physical id' /proc/cpuinfo|sort|uniq|wc -l&#13;
```&#13;
&#13;
查看cpu总核数：&#13;
```&#13;
grep -c processor /proc/cpuinfo&#13;
```&#13;
&#13;
即等于：&#13;
```&#13;
grep processor /proc/cpuinfo|wc -l&#13;
```&#13;
&#13;
使用top命令也可以知道cpu的总核数：&#13;
&#13;
通过执行top命令，然后按数字1，即可显示所有的CPU核数。</description><guid isPermaLink="true">https://notes4ever.github.io/post/84.html</guid><pubDate>Tue, 19 Nov 2024 02:47:40 +0000</pubDate></item><item><title>修改文件描述符</title><link>https://notes4ever.github.io/post/83.html</link><description>关于文件描述符：&#13;
&#13;
查看进程允许打开的最大文件句柄数：&#13;
```&#13;
ulimit -n&#13;
```&#13;
&#13;
设置进程能打开的最大文件句柄数：&#13;
```&#13;
ulimit -n xxx&#13;
```&#13;
&#13;
## 配置修改&#13;
### 编辑/etc/security/limits.conf&#13;
&#13;
```&#13;
* soft nofile 65535&#13;
* soft noproc 65535&#13;
* hard nofile 65535&#13;
* hard noproc 65535&#13;
root soft nofile 65535&#13;
root soft noproc 65535&#13;
root hard nofile 65535&#13;
root hard noproc 65535&#13;
```&#13;
&#13;
如果只改文件描述符，不改进程数量：&#13;
&#13;
```&#13;
* soft nofile 65535&#13;
* hard nofile 65535&#13;
root soft nofile 65535&#13;
root hard nofile 65535&#13;
```&#13;
&#13;
如果是debian系列，需要指出具体的用户，不能用通配符*，centos可以。</description><guid isPermaLink="true">https://notes4ever.github.io/post/83.html</guid><pubDate>Tue, 19 Nov 2024 02:43:25 +0000</pubDate></item><item><title>http协议的前世今生</title><link>https://notes4ever.github.io/post/82.html</link><description>## HTTP版本演进&#13;
HTTP 的英文全称是 Hypertext Transfer Protocol，中文是超文本传输协议，它的奠基者 是英国计算机科学家蒂姆·博纳斯·李（Tim Berners-Lee）。</description><guid isPermaLink="true">https://notes4ever.github.io/post/82.html</guid><pubDate>Tue, 19 Nov 2024 02:30:13 +0000</pubDate></item><item><title>HSTS的启用与预加载列表</title><link>https://notes4ever.github.io/post/81.html</link><description>许多大型和知名的公司都启用了HSTS来提高其网站的安全性。</description><guid isPermaLink="true">https://notes4ever.github.io/post/81.html</guid><pubDate>Tue, 19 Nov 2024 02:23:21 +0000</pubDate></item><item><title>tls信息查看与排查</title><link>https://notes4ever.github.io/post/80.html</link><description>```&#13;
curl -vk https://www.baidu.com&#13;
```&#13;
&#13;
```&#13;
openssl s_client -tlsextdebug -showcerts -connect www.baidu.com:443&#13;
```&#13;
&#13;
用strace跟踪：&#13;
&#13;
```&#13;
strace openssl s_client -tlsextdebug -showcerts -connect www.baidu.com:443&#13;
```&#13;
&#13;
在需要分析 OpenSSL 为什么报错的时候，你可以在前面加上 strace，这对于排查根因有不少的帮助。</description><guid isPermaLink="true">https://notes4ever.github.io/post/80.html</guid><pubDate>Tue, 19 Nov 2024 01:37:27 +0000</pubDate></item><item><title>crx转成可导入文件夹</title><link>https://notes4ever.github.io/post/79.html</link><description>如果crx被浏览器提示不属于商店里面的，不给正常开启，则crx的后缀可以改成zip或者7z，&#13;
&#13;
然后解压，在开发者模式下，可以导入文件夹，正常开启使用。</description><guid isPermaLink="true">https://notes4ever.github.io/post/79.html</guid><pubDate>Tue, 19 Nov 2024 01:27:47 +0000</pubDate></item><item><title>DMA与零拷贝</title><link>https://notes4ever.github.io/post/78.html</link><description>## DMA&#13;
DMA的全称：Direct Memory Access，直接存储器访问。</description><guid isPermaLink="true">https://notes4ever.github.io/post/78.html</guid><pubDate>Tue, 19 Nov 2024 01:22:25 +0000</pubDate></item><item><title>各种xxxstat命令</title><link>https://notes4ever.github.io/post/77.html</link><description>## dstat&#13;
dstat是一个新的性能工具，它吸收了 vmstat、iostat、ifstat 等几种工具的优点，可以同时观察系统的 CPU、磁盘 I/O、网络以及内存使用情况。</description><guid isPermaLink="true">https://notes4ever.github.io/post/77.html</guid><pubDate>Tue, 19 Nov 2024 00:51:14 +0000</pubDate></item><item><title>chrome关闭http跳转到https</title><link>https://notes4ever.github.io/post/76.html</link><description>1、地址栏输入： &#13;
&#13;
`chrome://net-internals/#hsts&#13;
`&#13;
&#13;
2、找到底部Delete domain security policies一栏，输入想处理的域名，点击delete。</description><guid isPermaLink="true">https://notes4ever.github.io/post/76.html</guid><pubDate>Tue, 19 Nov 2024 00:36:46 +0000</pubDate></item><item><title>系统性能工具之sar</title><link>https://notes4ever.github.io/post/75.html</link><description>## sysstat与sar&#13;
sysstat是Linux系统中的常用工具包，而sar 是 Linux中sysstat工具包中的用于监控Linux系统性能的工具之一。</description><guid isPermaLink="true">https://notes4ever.github.io/post/75.html</guid><pubDate>Fri, 15 Nov 2024 02:57:56 +0000</pubDate></item><item><title>miniforge替换miniconda</title><link>https://notes4ever.github.io/post/74.html</link><description>&gt; **anaconda和miniconda是商业产品，使用miniforge3替换之。</description><guid isPermaLink="true">https://notes4ever.github.io/post/74.html</guid><pubDate>Thu, 14 Nov 2024 05:56:12 +0000</pubDate></item><item><title>性能分析工具之perf</title><link>https://notes4ever.github.io/post/73.html</link><description>## perf Examples&#13;
Linux上的perf工具是一个强大的性能分析工具，它可以帮助开发者和系统管理员监控和分析系统性能。</description><guid isPermaLink="true">https://notes4ever.github.io/post/73.html</guid><pubDate>Thu, 14 Nov 2024 01:28:45 +0000</pubDate></item><item><title>net-tools与iproute2</title><link>https://notes4ever.github.io/post/72.html</link><description>&gt; **阐述ifconfig 和 ip的区别，进而说明net-tools与iproute2的联系和区别。</description><guid isPermaLink="true">https://notes4ever.github.io/post/72.html</guid><pubDate>Wed, 13 Nov 2024 06:57:41 +0000</pubDate></item><item><title>判断网站支不支持TLS1.3</title><link>https://notes4ever.github.io/post/71.html</link><description>## 浏览器里直接查看&#13;
F12面板-&gt;安全：&#13;
&#13;
![image](https://github.com/user-attachments/assets/6406f67f-8b43-42f9-bb1a-de8f9ab1cf26)&#13;
&#13;
## 通过nmap查看&#13;
&#13;
`nmap --script ssl-enum-ciphers -p 443 xxx.com`&#13;
&#13;
结果示例：&#13;
&#13;
![image](https://github.com/user-attachments/assets/669f0cc9-1a49-429e-9c70-abbae99a452f)&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/71.html</guid><pubDate>Wed, 13 Nov 2024 06:33:08 +0000</pubDate></item><item><title>浏览器指纹</title><link>https://notes4ever.github.io/post/70.html</link><description>## 浏览器指纹知识&#13;
&#13;
网站通过该技术收集您的信息，如操作系统、浏览器版本、浏览器使用的语言、您所在的时区、屏幕分辨率、电脑安装的字体等等。</description><guid isPermaLink="true">https://notes4ever.github.io/post/70.html</guid><pubDate>Wed, 13 Nov 2024 05:58:48 +0000</pubDate></item><item><title>跨机与单机网络通信</title><link>https://notes4ever.github.io/post/69.html</link><description>## 单次跨机网络通信&#13;
![image](https://github.com/user-attachments/assets/55bf9000-90b7-43c9-9926-6d82092cb3b0)&#13;
&#13;
## 本机IO不经过网卡&#13;
![image](https://github.com/user-attachments/assets/8952bab7-bd98-4b8d-8670-21ceec85770a)&#13;
&#13;
## 跨机与本机特点对比&#13;
&#13;
**192.x.x.x == 127.0.0.1 ==loopback==lo虚拟网卡**&#13;
&#13;
**首先，本机IP（比如192.x.x.x）和127.0.0.1没有差别，都是走的环回设备lo。</description><guid isPermaLink="true">https://notes4ever.github.io/post/69.html</guid><pubDate>Tue, 12 Nov 2024 09:53:30 +0000</pubDate></item><item><title>网速与流量监控</title><link>https://notes4ever.github.io/post/68.html</link><description>![image](https://github.com/user-attachments/assets/372fca56-350a-49b7-b85f-c07846cda847)&#13;
&#13;
&gt; **记录一些监控网速与流量的工具**&#13;
&#13;
## nload与iftop&#13;
&#13;
`nload -m `&#13;
&#13;
查看各个网络接口的总体网速，普通用户即可运行，很常用。</description><guid isPermaLink="true">https://notes4ever.github.io/post/68.html</guid><pubDate>Tue, 12 Nov 2024 09:32:43 +0000</pubDate></item><item><title>route -n ip route</title><link>https://notes4ever.github.io/post/67.html</link><description>![image](https://github.com/user-attachments/assets/72cd05f6-c279-404a-ad1a-b86c4a09c6a3)&#13;
&#13;
&gt; **查看路由表、网关**&#13;
&#13;
```&#13;
netstat -r &#13;
route -n &#13;
ip route&#13;
```&#13;
&#13;
netstat被ip和ss取代，尽量使用新的命令。</description><guid isPermaLink="true">https://notes4ever.github.io/post/67.html</guid><pubDate>Tue, 12 Nov 2024 07:25:09 +0000</pubDate></item><item><title>DNS与PTR</title><link>https://notes4ever.github.io/post/66.html</link><description>## 关于DNS与PTR基本说明&#13;
当你发现针对相同的网络服务，使用 IP 地址快而换成域名却慢很多时，就要想到，有可能是 DNS 在捣鬼。</description><guid isPermaLink="true">https://notes4ever.github.io/post/66.html</guid><pubDate>Tue, 12 Nov 2024 07:14:25 +0000</pubDate></item><item><title>man文件存放路径</title><link>https://notes4ever.github.io/post/65.html</link><description>## man文件存放路径&#13;
man命令通过环境变量`$MANPATH`知道：&#13;
&#13;
`echo $MANPATH`&#13;
&#13;
## 手动存放man文件&#13;
知道man路径后，手动存放，比如：&#13;
&#13;
`/usr/local/share/man/man1&#13;
`&#13;
&#13;
然后二进制命令xxx存放：&#13;
&#13;
`/usr/local/bin&#13;
`&#13;
&#13;
`man xxx `就有文档了。</description><guid isPermaLink="true">https://notes4ever.github.io/post/65.html</guid><pubDate>Tue, 12 Nov 2024 05:55:36 +0000</pubDate></item><item><title>mac电源管理命令</title><link>https://notes4ever.github.io/post/64.html</link><description>电源管理设置，查看当前配置：&#13;
&#13;
sudo pmset -g&#13;
&#13;
禁止网络接口休眠：&#13;
&#13;
sudo pmset -a sleep 0&#13;
&#13;
这个命令会禁用所有网络接口的节能模式，-a 参数表示对所有电源模式生效。</description><guid isPermaLink="true">https://notes4ever.github.io/post/64.html</guid><pubDate>Tue, 12 Nov 2024 05:50:33 +0000</pubDate></item><item><title>禁止Spotlight对移动设备索引</title><link>https://notes4ever.github.io/post/63.html</link><description>在很多时候Spotlight的确很方便，他可以帮忙快速地找到计算机中的文件或资源。</description><guid isPermaLink="true">https://notes4ever.github.io/post/63.html</guid><pubDate>Tue, 12 Nov 2024 05:45:43 +0000</pubDate></item><item><title>手机上安装linux发行版</title><link>https://notes4ever.github.io/post/62.html</link><description>## 使用termux  &#13;
官网：https://termux.dev/en/&#13;
&#13;
### 在termux上安装proot-distro&#13;
```&#13;
pkg update&#13;
pkg install proot-distro&#13;
```&#13;
### 在termux上安装linux发行版&#13;
查看可用的linux发行版：&#13;
&#13;
`proot-distro list`&#13;
&#13;
安装发行版：&#13;
```&#13;
proot-distro install debian&#13;
proot-distro install archlinux&#13;
```&#13;
&#13;
### 登录发行版&#13;
```&#13;
proot-distro login debian&#13;
proot-distro login archlinux&#13;
```&#13;
&#13;
## 使用UserLAnd&#13;
官网：https://userland.tech/&#13;
&#13;
直接使用图形化安装和使用，体验下来，感觉比termux更方便好用。</description><guid isPermaLink="true">https://notes4ever.github.io/post/62.html</guid><pubDate>Tue, 12 Nov 2024 05:40:24 +0000</pubDate></item><item><title>Homebrew切换国内源</title><link>https://notes4ever.github.io/post/61.html</link><description>修改.zshrc：&#13;
&#13;
```&#13;
export HOMEBREW_BREW_GIT_REMOTE='https://mirrors.ustc.edu.cn/brew.git'&#13;
export HOMEBREW_CORE_GIT_REMOTE='https://mirrors.ustc.edu.cn/homebrew-core.git'&#13;
export HOMEBREW_BOTTLE_DOMAIN='https://mirrors.ustc.edu.cn/homebrew-bottles'&#13;
export HOMEBREW_API_DOMAIN='https://mirrors.ustc.edu.cn/homebrew-bottles/api'&#13;
source ~/.zshrc &#13;
brew update&#13;
```&#13;
&#13;
参考：&#13;
&#13;
- https://cmcc.mirrors.ustc.edu.cn/help/brew.git.html。</description><guid isPermaLink="true">https://notes4ever.github.io/post/61.html</guid><pubDate>Tue, 12 Nov 2024 05:26:30 +0000</pubDate></item><item><title>conda常用命令</title><link>https://notes4ever.github.io/post/60.html</link><description>&gt; **miniconda的常用命令备忘**&#13;
&#13;
进入默认的base环境：&#13;
&#13;
`conda activate&#13;
`&#13;
&#13;
进入具体某个环境：&#13;
&#13;
`conda activate xxx&#13;
`&#13;
&#13;
查看所有环境：&#13;
&#13;
`conda env list&#13;
`&#13;
&#13;
退出默认或具体的环境：&#13;
&#13;
`conda deactivate (xxx)&#13;
`&#13;
&#13;
如果conda activate默认不能使用，可以使用conda初始化：&#13;
&#13;
`conda init zsh&#13;
`&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/60.html</guid><pubDate>Tue, 12 Nov 2024 05:18:15 +0000</pubDate></item><item><title>mac修改hosts</title><link>https://notes4ever.github.io/post/59.html</link><description>## 方式一，通过finder修改&#13;
可以参考[这篇](https://blog.csdn.net/hhi00/article/details/137923625)进行尝试。</description><guid isPermaLink="true">https://notes4ever.github.io/post/59.html</guid><pubDate>Tue, 12 Nov 2024 02:45:31 +0000</pubDate></item><item><title>挂载mount umount</title><link>https://notes4ever.github.io/post/58.html</link><description>## mount&#13;
![image](https://github.com/user-attachments/assets/5b3287bb-aa62-477a-a3de-b952e51898e4)&#13;
&#13;
![image](https://github.com/user-attachments/assets/b404861d-caeb-43fa-9cc1-745c9226dd1e)&#13;
&#13;
## umount&#13;
移除可移动设备时，不能直接将设备拔下，应该先卸载。</description><guid isPermaLink="true">https://notes4ever.github.io/post/58.html</guid><pubDate>Sun, 10 Nov 2024 14:16:23 +0000</pubDate></item><item><title>压缩与归档gzip tar tgz</title><link>https://notes4ever.github.io/post/57.html</link><description>## 最常用tar解压命令&#13;
&#13;
```&#13;
tar -xvf filename.tar&#13;
tar -zxvf filename.tgz&#13;
```&#13;
&#13;
注意后缀。</description><guid isPermaLink="true">https://notes4ever.github.io/post/57.html</guid><pubDate>Sun, 10 Nov 2024 12:34:14 +0000</pubDate></item><item><title>linux默认shell</title><link>https://notes4ever.github.io/post/56.html</link><description>![image](https://github.com/user-attachments/assets/40403db6-e82d-4a8b-9469-52cbf3a57397)&#13;
&#13;
在大多数 Linux 系统中，/etc/shells 文件中列出了各种已安装的 shell。</description><guid isPermaLink="true">https://notes4ever.github.io/post/56.html</guid><pubDate>Sun, 10 Nov 2024 09:53:08 +0000</pubDate></item><item><title>常用命令之history</title><link>https://notes4ever.github.io/post/55.html</link><description>![image](https://github.com/user-attachments/assets/791373b1-8bc8-4c3a-be44-bf55eb6fa583)&#13;
&#13;
history 是一个实用的内建命令，能帮助你管理先前执行过的命令。</description><guid isPermaLink="true">https://notes4ever.github.io/post/55.html</guid><pubDate>Sun, 10 Nov 2024 09:43:51 +0000</pubDate></item><item><title>ln软链接与硬链接</title><link>https://notes4ever.github.io/post/54.html</link><description>![image](https://github.com/user-attachments/assets/fb343f2f-67aa-4d60-b2cf-32c1a734814e)&#13;
&#13;
![image](https://github.com/user-attachments/assets/b2c70c75-bc87-4efd-8082-79ecb2f7ffb2)&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/54.html</guid><pubDate>Sun, 10 Nov 2024 09:39:27 +0000</pubDate></item><item><title>service --status-all</title><link>https://notes4ever.github.io/post/53.html</link><description>查看**所有服务的运行状态**信息：&#13;
&#13;
```&#13;
service --status-all&#13;
```&#13;
&#13;
[+] 代表服务是在运行的状态&#13;
[-] 代表服务是在关闭的状态&#13;
&#13;
其他常用：&#13;
&#13;
![image](https://github.com/user-attachments/assets/d8c5b73a-dea8-4bae-baa6-e1ab0ec9faf8)&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/53.html</guid><pubDate>Sun, 10 Nov 2024 09:36:33 +0000</pubDate></item><item><title>常用命令之whereis</title><link>https://notes4ever.github.io/post/52.html</link><description>![image](https://github.com/user-attachments/assets/fc231bba-8096-4bb3-b665-d2213d6b2c7d)&#13;
&#13;
**显示命令及相关文件的路径位置**。</description><guid isPermaLink="true">https://notes4ever.github.io/post/52.html</guid><pubDate>Sun, 10 Nov 2024 09:33:50 +0000</pubDate></item><item><title>常用命令之kill pkill</title><link>https://notes4ever.github.io/post/51.html</link><description>![image](https://github.com/user-attachments/assets/1a21422b-a18f-4182-91ff-107741c64c78)&#13;
&#13;
## kill + pid | kill -9 + pid&#13;
kill 命令可以通过 PID 向进程发送信号。</description><guid isPermaLink="true">https://notes4ever.github.io/post/51.html</guid><pubDate>Sun, 10 Nov 2024 09:31:21 +0000</pubDate></item><item><title>慎重使用命令find</title><link>https://notes4ever.github.io/post/50.html</link><description>find 命令的功能是根据给定的路径和条件查找相关文件或目录，其参数灵活方便，且支持正则表达式，结合管道符后能够实现更加复杂的功能，是 Linux 系统运维人员必须掌握的命令之一。</description><guid isPermaLink="true">https://notes4ever.github.io/post/50.html</guid><pubDate>Sun, 10 Nov 2024 09:05:59 +0000</pubDate></item><item><title>常用命令之grep</title><link>https://notes4ever.github.io/post/49.html</link><description>![image](https://github.com/user-attachments/assets/3d7aa7e7-1334-4d89-b06e-6bee02bec18f)&#13;
&#13;
## grep&#13;
&#13;
grep 命令来自英文词组 global search regular expression and print out the line 的缩写，意思 是用于全面搜索的正则表达式，并将结果输出。</description><guid isPermaLink="true">https://notes4ever.github.io/post/49.html</guid><pubDate>Sun, 10 Nov 2024 09:04:10 +0000</pubDate></item><item><title>常用工具之duf</title><link>https://notes4ever.github.io/post/48.html</link><description>&gt; **df 和 du 更好的替换工具**&#13;
&#13;
开源主页：&#13;
&#13;
https://github.com/muesli/duf&#13;
&#13;
安装：&#13;
&#13;
sudo apt/yum  install duf&#13;
&#13;
centos7默认yum无法install。</description><guid isPermaLink="true">https://notes4ever.github.io/post/48.html</guid><pubDate>Sun, 10 Nov 2024 08:58:35 +0000</pubDate></item><item><title>Homebrew常用命令</title><link>https://notes4ever.github.io/post/47.html</link><description>## brew常用命令&#13;
安装软件:&#13;
&#13;
`brew install &lt;package-name&gt;`&#13;
&#13;
卸载软件:&#13;
&#13;
`brew uninstall &lt;package-name&gt;`&#13;
&#13;
搜索软件:&#13;
`brew search &lt;package-name&gt;`&#13;
&#13;
更新指定软件:&#13;
&#13;
`brew upgrade &lt;package-name&gt;`&#13;
&#13;
查看已安装的软件列表:&#13;
&#13;
`brew list`&#13;
&#13;
更新Homebrew本身:&#13;
&#13;
`brew update`&#13;
&#13;
清理所有包的旧版本:&#13;
&#13;
`brew cleanup`&#13;
&#13;
清理指定包的旧版本:&#13;
&#13;
`brew cleanup &lt;package-name&gt;`&#13;
&#13;
预览可清理的旧版本包（不执行实际清理）:&#13;
&#13;
`brew cleanup -n`&#13;
&#13;
列出可以更新的软件包:&#13;
&#13;
`brew outdated`&#13;
&#13;
## 更多命令参考&#13;
&#13;
- https://blog.csdn.net/weixin_44280688/article/details/93391279。</description><guid isPermaLink="true">https://notes4ever.github.io/post/47.html</guid><pubDate>Sun, 10 Nov 2024 08:54:15 +0000</pubDate></item><item><title>mac刷新dns</title><link>https://notes4ever.github.io/post/46.html</link><description>`sudo killall -HUP mDNSResponder`。</description><guid isPermaLink="true">https://notes4ever.github.io/post/46.html</guid><pubDate>Sun, 10 Nov 2024 08:50:33 +0000</pubDate></item><item><title>mac开启和停用ipv6</title><link>https://notes4ever.github.io/post/45.html</link><description>## 查看mac所有网络接口及其名称&#13;
`sudo networksetup -listallnetworkservices`&#13;
## 在 Wi-Fi 和 以太网接口上禁用 IPv6&#13;
```&#13;
sudo networksetup -setv6off Wi-Fi&#13;
sudo networksetup -setv6off Ethernet&#13;
```&#13;
## 启用ipv6&#13;
```&#13;
sudo networksetup -setv6automatic Ethernet&#13;
sudo networksetup -setv6automatic Wi-Fi&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/45.html</guid><pubDate>Sun, 10 Nov 2024 08:49:10 +0000</pubDate></item><item><title>mac安装llvm clang</title><link>https://notes4ever.github.io/post/44.html</link><description>使用brew 安装：&#13;
&#13;
`brew install llvm`&#13;
&#13;
If you need to have llvm first in your PATH, run:&#13;
&#13;
`echo 'export PATH='/usr/local/opt/llvm/bin:$PATH'' &gt;&gt; ~/.zshrc`&#13;
&#13;
For compilers to find llvm you may need to set:&#13;
&#13;
```&#13;
export LDFLAGS='-L/usr/local/opt/llvm/lib'&#13;
export CPPFLAGS='-I/usr/local/opt/llvm/include'&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/44.html</guid><pubDate>Sun, 10 Nov 2024 08:44:53 +0000</pubDate></item><item><title>miniconda安装</title><link>https://notes4ever.github.io/post/43.html</link><description>![image](https://github.com/user-attachments/assets/1ce7a9f2-1914-4235-8aaa-bd83f587a67e)&#13;
&#13;
miniconda官网：&#13;
&#13;
https://docs.anaconda.com/miniconda/&#13;
&#13;
参考教程：&#13;
&#13;
https://zhuanlan.zhihu.com/p/685496400&#13;
&#13;
主要命令：&#13;
&#13;
```&#13;
mkdir -p ~/miniconda3&#13;
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh&#13;
bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3&#13;
rm -rf ~/miniconda3/miniconda.sh&#13;
&#13;
~/miniconda3/bin/conda init bash&#13;
~/miniconda3/bin/conda init zsh&#13;
```&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/43.html</guid><pubDate>Fri, 08 Nov 2024 16:16:23 +0000</pubDate></item><item><title>pip pipx安装与国内源设置</title><link>https://notes4ever.github.io/post/42.html</link><description>## pip设置清华源&#13;
&#13;
`pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple`&#13;
&#13;
linux与windows通用。</description><guid isPermaLink="true">https://notes4ever.github.io/post/42.html</guid><pubDate>Fri, 08 Nov 2024 16:06:38 +0000</pubDate></item><item><title>pip离线安装软件包</title><link>https://notes4ever.github.io/post/41.html</link><description>以apscheduler为例：&#13;
&#13;
pip download apscheduler -d /media/sf_share/apscheduler&#13;
&#13;
将 /media/sf_share/apscheduler目录打包，上传到需要离线安装的机器。</description><guid isPermaLink="true">https://notes4ever.github.io/post/41.html</guid><pubDate>Fri, 08 Nov 2024 16:04:11 +0000</pubDate></item><item><title>python3编译安装</title><link>https://notes4ever.github.io/post/40.html</link><description>```&#13;
sudo yum groupinstall 'Development Tools'&#13;
sudo yum install openssl-devel bzip2-devel zlib-devel readline-devel sqlite-devel xz-devel libffi-devel&#13;
```&#13;
&#13;
[官网](https://www.python.org/downloads/)下载python源码：&#13;
&#13;
python3124.tar.xz&#13;
&#13;
解压编译：&#13;
&#13;
&#13;
```&#13;
tar -xf python3124.tar.xz&#13;
cd python3124&#13;
./configure --prefix=/app/usr/python3&#13;
make &#13;
make install&#13;
```&#13;
&#13;
加入环境变量：&#13;
&#13;
`export PATH=/app/usr/python3/bin:$PATH`&#13;
&#13;
生效：&#13;
&#13;
`source ~/.bashrc `&#13;
&#13;
软链接python3和pip3：&#13;
&#13;
```&#13;
ln -s python3 python&#13;
ln -s pip3 pip&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/40.html</guid><pubDate>Fri, 08 Nov 2024 15:58:53 +0000</pubDate></item><item><title>Finder分栏设置默认宽度</title><link>https://notes4ever.github.io/post/39.html</link><description>苹果电脑 Mac OS X 系统中最重要的功能：Finder 有四种显示模式：图标、列表、分栏、Cover Flow，很多 Mac 用户使用第三种分栏模式。</description><guid isPermaLink="true">https://notes4ever.github.io/post/39.html</guid><pubDate>Fri, 08 Nov 2024 15:34:07 +0000</pubDate></item><item><title>mac删除顽固残留软件图标</title><link>https://notes4ever.github.io/post/38.html</link><description>![image](https://github.com/user-attachments/assets/72144948-1eb7-439a-bea3-dc67dd1d8ada)&#13;
&#13;
打开Terminal：&#13;
&#13;
`sqlite3 $(find /private/var/folders \( -name com.apple.dock.launchpad -a -user $USER \) 2&gt; /dev/null)/db/db 'DELETE FROM apps WHERE title='python';' &amp;&amp; killall Dock `&#13;
&#13;
title =''输入你实际要删除软件的名字，比如`python`。</description><guid isPermaLink="true">https://notes4ever.github.io/post/38.html</guid><pubDate>Fri, 08 Nov 2024 15:30:44 +0000</pubDate></item><item><title>docker与普通用户权限</title><link>https://notes4ever.github.io/post/37.html</link><description>步骤：&#13;
&#13;
1、添加docker源，linuxmint可以参考：&#13;
&#13;
https://www.zhihu.com/question/630722571&#13;
&#13;
2、安装&#13;
```&#13;
sudo apt-get install docker-ce docker-ce-cli containerd.io&#13;
```&#13;
3、配置普通用户运维权限&#13;
&#13;
```&#13;
sudo usermod -aG docker $USER&#13;
newgrp docker&#13;
```&#13;
&#13;
其它参考，可选：&#13;
&#13;
- https://zhuanlan.zhihu.com/p/651148141&#13;
- https://docs.docker.com/engine/security/rootless/ &#13;
- https://docs.docker.com/engine/install/linux-postinstall/。</description><guid isPermaLink="true">https://notes4ever.github.io/post/37.html</guid><pubDate>Fri, 08 Nov 2024 15:17:24 +0000</pubDate></item><item><title>CF搭建dockerhub代理</title><link>https://notes4ever.github.io/post/36.html</link><description>&gt; **cloudflare反向代理之dockerhub代理配置。</description><guid isPermaLink="true">https://notes4ever.github.io/post/36.html</guid><pubDate>Fri, 08 Nov 2024 14:32:32 +0000</pubDate></item><item><title>virtualbox虚拟机常用配置</title><link>https://notes4ever.github.io/post/35.html</link><description>&gt; **virtualbox重点配置记录**&#13;
&#13;
## virtualbox修改vdi的uuid&#13;
复制虚拟机的时候，一般是复制vdi，然后修改vdi，才能启动为新的虚拟机。</description><guid isPermaLink="true">https://notes4ever.github.io/post/35.html</guid><pubDate>Fri, 08 Nov 2024 14:27:52 +0000</pubDate></item><item><title>linuxmint安装中文输入法</title><link>https://notes4ever.github.io/post/34.html</link><description>`&#13;
sudo apt-get install fcitx fcitx-bin fcitx-pinyin  fcitx-googlepinyin&#13;
`&#13;
&#13;
重启虚拟机 或者 注销重新登录。</description><guid isPermaLink="true">https://notes4ever.github.io/post/34.html</guid><pubDate>Fri, 08 Nov 2024 14:06:33 +0000</pubDate></item><item><title>centos9设置国内源与epel</title><link>https://notes4ever.github.io/post/33.html</link><description>![image](https://github.com/user-attachments/assets/1f7b7926-381d-4998-a57c-cb042b35d33b)&#13;
&#13;
&gt; **centos 9 国内源设置**&#13;
&#13;
## centos9设置中科大源&#13;
&#13;
yum源目录：/etc/yum.repos.d&#13;
目录下所有的*.repo文件都移动到bak，用不到暂时备份。</description><guid isPermaLink="true">https://notes4ever.github.io/post/33.html</guid><pubDate>Fri, 08 Nov 2024 13:59:27 +0000</pubDate></item><item><title>常用命令之systemctl</title><link>https://notes4ever.github.io/post/32.html</link><description>&gt; **systemctl是很常用的命令，以sshd服务进程为例记录**&#13;
&#13;
## 查看ssh是否安装，以及安装方法&#13;
查看ssh是否安装：&#13;
```&#13;
rpm -qa | grep ssh&#13;
```&#13;
如有显示类似下面这些就说明安装了&#13;
```&#13;
libssh2-1.4.3-10.el7.x86_64&#13;
openssh-server-6.6.1p1-22.el7.x86_64&#13;
openssh-clients-6.6.1p1-22.el7.x86_64&#13;
openssh-6.6.1p1-22.el7.x86_64&#13;
```&#13;
安装命令：&#13;
```&#13;
sudo yum install openssh-server&#13;
```&#13;
&#13;
## 查看ssh服务状态&#13;
&#13;
方法一：&#13;
```&#13;
/etc/init.d/sshd status&#13;
```&#13;
方法二：&#13;
```&#13;
systemctl status sshd.service&#13;
```&#13;
&#13;
## 启停命令&#13;
1、开启SSH服务&#13;
```&#13;
service sshd start&#13;
```&#13;
2、停止SSH服务&#13;
```&#13;
service sshd stop&#13;
```&#13;
3、重启SSH服务&#13;
```&#13;
service sshd restart&#13;
```&#13;
4、验证服务是否启动成功&#13;
```&#13;
netstat -antp | grep sshd&#13;
```&#13;
&#13;
## 开机自启配置&#13;
1、检查SSH是否在本运行级别下设置为开机启动&#13;
```&#13;
chkconfig --list sshd&#13;
```&#13;
执行结果 sshd               0:off    1:off    2:on    3:on    4:on    5:on    6:off&#13;
&#13;
2、如果没有设置可通过下面命令设置运行级别&#13;
```&#13;
chkconfig --level 2345 sshd on&#13;
```&#13;
指定运行级别为2,3,4,5&#13;
等级0表示：表示关机&#13;
等级1表示：单用户模式&#13;
等级2表示：无网络连接的多用户命令行模式&#13;
等级3表示：有网络连接的多用户命令行模式&#13;
等级4表示：不可用&#13;
等级5表示：带图形界面的多用户模式&#13;
等级6表示：重新启动&#13;
&#13;
3、设置开机启动信息&#13;
```&#13;
chkconfig sshd on&#13;
```&#13;
也可以通过以下命令设置&#13;
```&#13;
systemctl enable sshd&#13;
```&#13;
&#13;
## 查看服务器所有设置开机启动的服务&#13;
```&#13;
systemctl list-unit-files --state=enabled&#13;
```。</description><guid isPermaLink="true">https://notes4ever.github.io/post/32.html</guid><pubDate>Fri, 08 Nov 2024 13:49:12 +0000</pubDate></item><item><title>journalctl dmesg strace</title><link>https://notes4ever.github.io/post/31.html</link><description>&gt; **linux下常用的日志排查与进程追踪命令有journalctl dmesg strace等**&#13;
&#13;
## journalctl&#13;
journalctl 命令来自英文词组 journal control 的缩写，其功能是查看指定的日志信息。</description><guid isPermaLink="true">https://notes4ever.github.io/post/31.html</guid><pubDate>Fri, 08 Nov 2024 13:02:54 +0000</pubDate></item><item><title>CF workers pages反向代理</title><link>https://notes4ever.github.io/post/30.html</link><description>&gt; **cloudflare提供了workers和pages，可以用来做反向代理，而且提供了个人够用的免费套餐。</description><guid isPermaLink="true">https://notes4ever.github.io/post/30.html</guid><pubDate>Fri, 08 Nov 2024 12:38:59 +0000</pubDate></item><item><title>浏览器开启DoH和ECH</title><link>https://notes4ever.github.io/post/29.html</link><description>&gt;**DoH和ECH尽量开启，可以保障一些隐私，尤其是请求的服务端支持ECH的时候。</description><guid isPermaLink="true">https://notes4ever.github.io/post/29.html</guid><pubDate>Thu, 07 Nov 2024 05:02:54 +0000</pubDate></item><item><title>GFW进阶技术</title><link>https://notes4ever.github.io/post/28.html</link><description>&gt; **除了基本的IP阻断、DNS污染和SNI阻断手段，GFW还采用了更为高阶的技术手段，并且会持续进化。</description><guid isPermaLink="true">https://notes4ever.github.io/post/28.html</guid><pubDate>Thu, 07 Nov 2024 01:36:10 +0000</pubDate></item><item><title>IP阻断 DNS污染与DoH</title><link>https://notes4ever.github.io/post/27.html</link><description>&gt; **GFW工作的时候，除了SNI阻断之外，常用基本手段还有IP阻断和DNS污染。</description><guid isPermaLink="true">https://notes4ever.github.io/post/27.html</guid><pubDate>Wed, 06 Nov 2024 14:52:02 +0000</pubDate></item><item><title>域前置技术与反向代理</title><link>https://notes4ever.github.io/post/26.html</link><description>![image](https://github.com/user-attachments/assets/da31a224-f048-44c6-9ff9-1ea17ddaad55)&#13;
&#13;
&gt; **GFW工作的时候，识别SNI然后阻断是常用手段之一，域前置技术与反向代理可以绕过SNI阻断。</description><guid isPermaLink="true">https://notes4ever.github.io/post/26.html</guid><pubDate>Wed, 06 Nov 2024 13:43:15 +0000</pubDate></item><item><title>Terminal使用系统代理</title><link>https://notes4ever.github.io/post/25.html</link><description>&gt; **除了浏览器使用系统代理，Terminal里面执行命令也可以使用，解决像brew和git等网络代理问题。</description><guid isPermaLink="true">https://notes4ever.github.io/post/25.html</guid><pubDate>Wed, 06 Nov 2024 11:55:34 +0000</pubDate></item><item><title>网络延迟之tcping和httping</title><link>https://notes4ever.github.io/post/24.html</link><description>&gt; **类比ping之基于icmp，用于探测网络层的延迟；tcping基于tcp，用于探测tcp三次握手；httping基于http/https用于测试真实的http/https数据返回延迟。</description><guid isPermaLink="true">https://notes4ever.github.io/post/24.html</guid><pubDate>Wed, 06 Nov 2024 09:43:31 +0000</pubDate></item><item><title>常用命令之df与du</title><link>https://notes4ever.github.io/post/23.html</link><description>&gt; **人们经常会把df和du命令混淆，df是用于查看磁盘或分区使用情况的命令，而du命令则是用于按照指定容量单位来查看文件或目录在磁盘中的占用情况。</description><guid isPermaLink="true">https://notes4ever.github.io/post/23.html</guid><pubDate>Wed, 06 Nov 2024 08:30:47 +0000</pubDate></item><item><title>常用命令之tee</title><link>https://notes4ever.github.io/post/22.html</link><description>&gt; **tee命令：读取标准输入内容（包括缓冲区比如vim编辑刷新内容），将读取到的数据写到标准输出和文件。</description><guid isPermaLink="true">https://notes4ever.github.io/post/22.html</guid><pubDate>Wed, 06 Nov 2024 06:46:58 +0000</pubDate></item><item><title>常用命令之top</title><link>https://notes4ever.github.io/post/21.html</link><description>![image](https://github.com/user-attachments/assets/d16f8864-8a3e-481f-aeb0-b2ab52759b18)&#13;
&#13;
&gt; **与 ps 命令相似，top 命令也可以显示进程信息，但采用的是实时方式。</description><guid isPermaLink="true">https://notes4ever.github.io/post/21.html</guid><pubDate>Wed, 06 Nov 2024 06:33:36 +0000</pubDate></item><item><title>su - sudo su - sudo -i 的区别</title><link>https://notes4ever.github.io/post/20.html</link><description>&gt; **关于su和sudo的命令很容易记错用错，在此总结。</description><guid isPermaLink="true">https://notes4ever.github.io/post/20.html</guid><pubDate>Wed, 06 Nov 2024 06:22:53 +0000</pubDate></item><item><title>利用dd命令创建空洞文件</title><link>https://notes4ever.github.io/post/19.html</link><description>&#13;
![image](https://github.com/user-attachments/assets/d9042e24-b949-47db-b4bc-1fd2ba84a77b)&#13;
&#13;
&gt; **利用dd命令创建文件，以及ls和du查看文件大小的区别。</description><guid isPermaLink="true">https://notes4ever.github.io/post/19.html</guid><pubDate>Wed, 06 Nov 2024 06:15:14 +0000</pubDate></item><item><title>安装java openjdk</title><link>https://notes4ever.github.io/post/18.html</link><description>&gt; **java环境 jdk的安装，以linuxmint和centos为示例。</description><guid isPermaLink="true">https://notes4ever.github.io/post/18.html</guid><pubDate>Wed, 06 Nov 2024 05:59:24 +0000</pubDate></item><item><title>sudo免输入账号密码</title><link>https://notes4ever.github.io/post/17.html</link><description>&gt; **sudo 执行命令的时候配置免输入密码，此方式并不推荐，只适合懒人和并不知道某用户密码的场景。</description><guid isPermaLink="true">https://notes4ever.github.io/post/17.html</guid><pubDate>Wed, 06 Nov 2024 05:42:32 +0000</pubDate></item><item><title>linuxmint禁止升级内核</title><link>https://notes4ever.github.io/post/16.html</link><description>&#13;
![image](https://github.com/user-attachments/assets/f820c107-3c66-482b-8e72-0261dddf1bf7)&#13;
&#13;
&gt; **upgrade的时候禁止升级内核版本，以linuxmint为示例。</description><guid isPermaLink="true">https://notes4ever.github.io/post/16.html</guid><pubDate>Wed, 06 Nov 2024 05:36:22 +0000</pubDate></item><item><title>node npm cnpm pnpm</title><link>https://notes4ever.github.io/post/15.html</link><description>&gt; **关于node与npm的配置，以linuxmint为示例**&#13;
&#13;
```&#13;
sudo apt update&#13;
sudo apt install -y nodejs&#13;
sudo apt install -y npm&#13;
```&#13;
&#13;
之前nodejs安装完成后npm就自带了，现在比较新的发行版貌似是要单独安装npm才行。</description><guid isPermaLink="true">https://notes4ever.github.io/post/15.html</guid><pubDate>Wed, 06 Nov 2024 05:25:05 +0000</pubDate></item><item><title>home目录中英文切换</title><link>https://notes4ever.github.io/post/14.html</link><description>&gt; **linuxmint下一种中英文目录名切换的方式**&#13;
&#13;
打开终端，在终端下输入命令：&#13;
```&#13;
sudo apt-get install xdg-user-dirs-gtk &#13;
export LANG=en_US &#13;
xdg-user-dirs-gtk-update&#13;
export LANG=zh_CN.UTF-8&#13;
```&#13;
&#13;
更改export LANG实现切换，可能需要注销重启生效。</description><guid isPermaLink="true">https://notes4ever.github.io/post/14.html</guid><pubDate>Wed, 06 Nov 2024 05:17:42 +0000</pubDate></item><item><title>centos yum epel-release</title><link>https://notes4ever.github.io/post/13.html</link><description>&gt; **关于centos epel** &#13;
&#13;
&#13;
```&#13;
sudo yum -y install epel-release&#13;
sudo yum clean all #清除本地缓存&#13;
sudo yum makecache #把源缓存到本地&#13;
```&#13;
&#13;
EPEL 代表 Extra Packages for Enterprise Linux，由 Fedora Special Interest Group 创建和维护。</description><guid isPermaLink="true">https://notes4ever.github.io/post/13.html</guid><pubDate>Wed, 06 Nov 2024 02:59:07 +0000</pubDate></item><item><title>linuxmint删除缓存</title><link>https://notes4ever.github.io/post/12.html</link><description>![image](https://github.com/user-attachments/assets/1f8c7027-8536-4d59-8368-7b5e9cc70724)&#13;
&#13;
&gt; **关于linuxmint缓存的删除，包括apt缓存等**&#13;
&#13;
## apt缓存路径&#13;
查看大小：&#13;
&#13;
`sudo du -sh /var/cache/apt/archives`&#13;
&#13;
删除：&#13;
&#13;
`sudo apt clean`&#13;
&#13;
重新查看就变小了。</description><guid isPermaLink="true">https://notes4ever.github.io/post/12.html</guid><pubDate>Wed, 06 Nov 2024 02:50:26 +0000</pubDate></item><item><title>常用命令之rm</title><link>https://notes4ever.github.io/post/11.html</link><description>![image](https://github.com/user-attachments/assets/12192754-59a2-4a1e-bbb2-6a34ce4fbc83)&#13;
&#13;
&gt; **删除命令相关，rm权力太大，要限制，尤其是root和sudo执行rm。</description><guid isPermaLink="true">https://notes4ever.github.io/post/11.html</guid><pubDate>Wed, 06 Nov 2024 02:36:41 +0000</pubDate></item><item><title>AI搜索引擎中文简单评测</title><link>https://notes4ever.github.io/post/10.html</link><description>![image](https://github.com/user-attachments/assets/36ea604f-83a5-449c-9658-a695612ebee2)&#13;
&#13;
&gt; **AI大幕开启，群雄逐鹿，选用比较好用的中文搜索工具是必要的。</description><guid isPermaLink="true">https://notes4ever.github.io/post/10.html</guid><pubDate>Tue, 05 Nov 2024 15:06:46 +0000</pubDate></item><item><title>youtube视频下载</title><link>https://notes4ever.github.io/post/9.html</link><description>![image](https://github.com/user-attachments/assets/27d3a775-6f36-426d-8d17-5e02c13cb05a)&#13;
&#13;
&gt; 油管视频下载工具&#13;
&#13;
## 命令行工具&#13;
[yt-dlp](https://github.com/yt-dlp/yt-dlp)，一款非常受欢迎的youtube视频下载工具，目前87K个star。</description><guid isPermaLink="true">https://notes4ever.github.io/post/9.html</guid><pubDate>Tue, 05 Nov 2024 08:00:05 +0000</pubDate></item><item><title>暂时关闭quic协议</title><link>https://notes4ever.github.io/post/8.html</link><description>![image](https://github.com/user-attachments/assets/ab7c0d58-4d6d-476b-96b7-84fc7ea55cf8)&#13;
&#13;
&gt; **quic是http/3的基石，也是趋势和未来**&#13;
&#13;
虽然quic是更先进的传输层协议，但实际使用中可能会碰到问题，尤其是在大陆。</description><guid isPermaLink="true">https://notes4ever.github.io/post/8.html</guid><pubDate>Tue, 05 Nov 2024 06:38:44 +0000</pubDate></item><item><title>常用浏览器之librewolf</title><link>https://notes4ever.github.io/post/7.html</link><description>![image](https://github.com/user-attachments/assets/b7792b03-c8a2-4757-a877-1aeaad551d87)&#13;
&#13;
&gt; **值得向所有人推荐的浏览器**&#13;
&#13;
## Firefox家族浏览器&#13;
基于Mozilla开源内核的浏览器很多，其中有不少优秀的代表，隐私与安全方面有Tor和Mullvad，性能与交互都很优秀的Zen，如果注重隐私与安全，又不牺牲太多便捷性，同时又简洁可靠不花哨，那[lirewolf](https://librewolf.net/)应该是不二之选。</description><guid isPermaLink="true">https://notes4ever.github.io/post/7.html</guid><pubDate>Tue, 05 Nov 2024 01:58:47 +0000</pubDate></item><item><title>常用命令之nohup</title><link>https://notes4ever.github.io/post/6.html</link><description>![image](https://github.com/user-attachments/assets/a62559a6-bbe9-47c5-82fa-e81dbd417b41)&#13;
&#13;
&gt; **后台运行命令，以及恢复命令的前台执行**&#13;
&#13;
*nix系统下有很多关于后台、挂起、前台恢复的命令；在此列举一些常用的，尤其是最强大的nohup。</description><guid isPermaLink="true">https://notes4ever.github.io/post/6.html</guid><pubDate>Mon, 04 Nov 2024 08:54:20 +0000</pubDate></item><item><title>Terminal常用快捷键</title><link>https://notes4ever.github.io/post/5.html</link><description>![cli-commands](https://github.com/user-attachments/assets/92509d21-fce3-4e1b-8359-d94719aef1e6)&#13;
&#13;
&gt; **到处都是快捷键，太多了，记录Terminal最常用的快捷键**&#13;
&#13;
## 移动光标到行首&#13;
Ctrl-a &#13;
&#13;
## 移动光标到行尾&#13;
Ctrl-e &#13;
&#13;
## 清屏&#13;
Ctrl-l  == clear命令&#13;
&#13;
## 在单词之间跳转&#13;
Ctrl+左右键&#13;
&#13;
## 删除当前光标前面所有的字符&#13;
Ctrl+u&#13;
&#13;
更确切地说法是剪切&#13;
&#13;
## 删除当前光标后面所有的字符&#13;
Ctrl+k&#13;
&#13;
也是剪切&#13;
&#13;
## 粘贴Ctrl+u或Ctrl+k剪切的内容&#13;
Ctrl + y&#13;
&#13;
。</description><guid isPermaLink="true">https://notes4ever.github.io/post/5.html</guid><pubDate>Mon, 04 Nov 2024 08:13:01 +0000</pubDate></item><item><title>常用命令之less</title><link>https://notes4ever.github.io/post/4.html</link><description>![image](https://github.com/user-attachments/assets/899255d7-0cd2-4324-b41e-46cd09322012)&#13;
&#13;
&#13;
&gt; **lesss is more than more**&#13;
&#13;
## less命令&#13;
less是more命令的升级版本；文本文件的读取一般使用less，尤其较大文件。</description><guid isPermaLink="true">https://notes4ever.github.io/post/4.html</guid><pubDate>Mon, 04 Nov 2024 07:11:19 +0000</pubDate></item><item><title>常用命令之ps</title><link>https://notes4ever.github.io/post/3.html</link><description>![image](https://github.com/user-attachments/assets/43b47427-f7ce-4248-af0a-79d02094ea4d)&#13;
&#13;
&gt; **ps命令与netstat类似，参数比较多，需要记住一些重要的，常用的**&#13;
&#13;
## ps实践最常用法&#13;
### 查看所有进程&#13;
**ps -ef  和 ps -efl**（小写的l）&#13;
&#13;
### 查看所有进程及其线程&#13;
**ps -efL** （大写的L）&#13;
&#13;
### 查看某用户下的进程及其线程&#13;
**ps -u username -Lf**&#13;
&#13;
### 查看特定进程的线程，结果包含进程本身&#13;
假设进程ID为1234：&#13;
**ps -mp 1234 -Lf**&#13;
&#13;
### 查看特定进程的线程，结果不包含进程本身&#13;
假设进程ID为1234：&#13;
**ps  -p 1234 -Lf**&#13;
&#13;
## 部分命令参数与输出结果解释&#13;
ps 命令堪比工具中的瑞士军刀，能够输出系统中运行的所有程序（进程）的大量信息。</description><guid isPermaLink="true">https://notes4ever.github.io/post/3.html</guid><pubDate>Mon, 04 Nov 2024 06:25:21 +0000</pubDate></item><item><title>tshark使用笔记</title><link>https://notes4ever.github.io/post/2.html</link><description>![image](https://github.com/user-attachments/assets/e3ea6ef6-3bc8-4877-8e0a-704e7a87104e)&#13;
&#13;
&gt; **记录tshark常用命令**&#13;
&#13;
## 查看tshark版本&#13;
tshark -v&#13;
&#13;
## 查看网络接口&#13;
tshark -D&#13;
&#13;
实际使用，只需要网络接口对应的序号即可。</description><guid isPermaLink="true">https://notes4ever.github.io/post/2.html</guid><pubDate>Sun, 03 Nov 2024 14:40:38 +0000</pubDate></item><item><title>Alacritty Terminal</title><link>https://notes4ever.github.io/post/1.html</link><description>![image](https://github.com/user-attachments/assets/2d792155-617e-4c79-9cef-298d8b91714e)&#13;
&#13;
&gt; **简洁，快速，稳定的Terminal**&#13;
&#13;
## 忆往昔&#13;
&#13;
记得多年前，第一次使用Linux（Ubuntu），打开终端，仿佛打开了一个新的世界。</description><guid isPermaLink="true">https://notes4ever.github.io/post/1.html</guid><pubDate>Sun, 03 Nov 2024 06:37:12 +0000</pubDate></item></channel></rss>